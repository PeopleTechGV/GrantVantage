@model  ATS.WebUi.Models.BreadScrumbModel<ATS.BusinessEntity.Profile>
@using BEUploadResumeConst = ATS.BusinessEntity.Common.UploadResumeConst
@using BECommonConstantConst = ATS.BusinessEntity.Common.CommonConstant
@{
    ViewBag.Title = "CreateProfileNav";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Navigation{
    <div class="NavItems">
        <div class="MenuItemIcon bgMyProfile16W"></div>
        <span class="navTitle">MY PROFILE</span>
        <span class="chevron"></span>
    </div>
}

<style>
    .frmUploadDocument > div.AddNewFile {
        float: left;
        width: 5%;
    }

    .btnUpload {
        background-color: #fff;
        background-image: url("/Content/images/add_new_16.png");
        background-position: center center;
        border: medium none;
        height: 22px;
        width: 22px;
        cursor: pointer;
        float: left;
    }

        .btnUpload:hover {
            background-color: #345E8E;
            background-image: url("/Content/images/add_new_white_16.png");
        }

    .detail-input, .detail-select {
        height: 26px !important;
    }
</style>


<div id="ErrorMessage"></div>

@using (Html.BeginForm("IndexProfile", "Myprofile", new { allowParse = true, FromWhere = "CreateProfileManually" }, FormMethod.Post, new { enctype = "multipart/form-data", @id = "form1" }))
{
    @Html.HiddenFor(m => m.obj.ExtensionTypes, new { @id = "hdnExtensiontypes" })
    @Html.HiddenFor(m => m.obj.DocCategoryType, new { @id = "hdnDocCategoryType" })
    <div class="box w50 SMW100 SMLRPad1">
        <label class="label_radio @String.Format("{0}", Convert.ToBoolean(ViewBag.ForUpdate) ? "r_off" : "r_on")" for="radio-01"></label>
        <input name="sample-radio" id="radio-01" value="1" type="radio" @String.Format("{0}", Convert.ToBoolean(ViewBag.ForUpdate) ? "" : "Checked") />
        <span class="ttldbrown">Create a new profile by uploading a resume</span>
        <div id="profileMaker" class="ProfileMaker SMContentBox">
            <div class="box">
                @Html.LanguageLabelFor(m => m.obj.ProfileName, new { @class = "w100 floatleft lblBblue" })
                @Html.TextBoxFor(m => m.obj.ProfileName, new { @class = "detail-input w50" })
            </div>
            <div class="box">
                <span class="w100 floatleft lblBblue">Upload Resume</span>
                <input type="file" value="Browse" name="documentFile" id="uploadResume" data-extensions="@Model.obj.ExtensionTypes" />
                <div class="ttldblue"><span class="ttllbrown">Ex: </span>@Model.obj.ExtensionTypes</div>
            </div>
            <div class="box" style="margin-top: 15px;">
                <button class="btn-icon24 bgUploadDocument24 floatright bordered CaseUpper" id="btnSub" title="@Html.LanguageLabel(BECommonConstantConst.UPLOADDOCUMENT)" style="margin-right: 0">
                    @Html.LanguageLabel(BECommonConstantConst.UPLOADRESUME)
                </button>
            </div>
        </div>
    </div>
    @*<div class="box floatright" style="margin-top: 8px;"></div>*@
    <br clear="all" />
    <div class="box w50 SMW100 SMLRPad1">
        <label class="label_radio  @String.Format("{0}", Convert.ToBoolean(ViewBag.ForUpdate) ? "r_on" : "r_off")" for="radio-02"></label>
        <input name="sample-radio" id="radio-02" value="1" type="radio" @String.Format("{0}", Convert.ToBoolean(ViewBag.ForUpdate) ? "Checked" : "") />
        <span class="ttldbrown">Create a new profile manually</span>
    </div>
}
<div class="nxtstep" style="clear: both; display: inline-block; margin-left: 25px; margin-top: 10px;">
    <a href="@Url.Action("CreateProfileManually", "MyProfile", new { @area = ATS.WebUi.Common.Constants.AREA_CANDIDATE })" class="btn-icon16-right bgNext16">Next</a>
</div>

<script>
    $(function () {
        $('#btnSub').click(function () {
            debugger;
            var uploadResume = $("#uploadResume").val();
            if (uploadResume == "") {
                $("#uploadResume").addClass("input-validation-error");
                return false;
            }
            else {
                $("#uploadResume").removeClass("input-validation-error");
            }
            var iSize = ($("#uploadResume")[0].files[0].size / 1024);
            var iisize = iSize / 1024;
            if (iisize > 10) {
                VacancyModel.DisplayErrorMeesage('#commonMessage', "Maximum file size is 10 MB", '@ATS.WebUi.Common.Constants.JSCR_MSG_FADEOUT');
                return false;
            }
            else {
                var ext = $("#uploadResume").attr("data-extensions");
                var obj = VacancyModel.ValidateDocumentType(uploadResume, ext, true);
                if (obj.IsError) {
                    VacancyModel.DisplayErrorMeesage('#commonMessage', obj.Message, '@ATS.WebUi.Common.Constants.JSCR_MSG_FADEOUT');
                    $('#uploadResume').addClass('input-validation-error');
                    return false;
                }
                else {
                    $('#uploadResume').removeClass('input-validation-error');
                    SubmitCreateForm();
                }
            }
        });
    });

    function ValidateDocument(filename, extensions) {
        var _filename = filename;
        var ext = _filename.split('.').pop();
        if (extensions.indexOf(ext) != -1) {
            return true;
        } else {
            VacancyModel.DisplayErrorMeesage('#commonMessage', "Invalid File Type!! allow only " + extensions, 1500)
            return false;
        }
    }

    $('#uploadResume').change(function (click) {
        filename = $(this).val().replace(/.*(\/|\\)/, '');

        var extensions = $(this).attr("data-extensions");
        var result = ValidateDocument(filename, extensions);
        if (!result) {
            //$(this).closest('.frmUploadDocument').submit();
            return false
        }
    });

    var safari = (navigator.userAgent.toLowerCase().indexOf('safari') != -1) ? true : false;
    var gebtn = function (parEl, child) { return parEl.getElementsByTagName(child); };
    var turn_radio = function () {
        var inp = gebtn(this, 'input')[0];

        if (this.className == 'label_radio r_off' || inp.checked) {

            var ls = gebtn(this.parentNode, 'label');
            for (var i = 0; i < ls.length; i++) {
                var l = ls[i];
                if (l.className.indexOf('label_radio') == -1) continue;
                l.className = 'label_radio r_off';
            };

            this.className = 'label_radio r_on';
            if (safari) inp.click();
        }
        else {
            this.className = 'label_radio r_off';
            if (safari) inp.click();
        };
    };

    function SubmitCreateForm() {
        $('#form1').submit();
    }

    $(document).ready(function () {
        $(".nxtstep").hide();
        $('#radio-01').on("change", function () {
            $(".nxtstep").hide();
            $("#profileMaker").show();
            $("#btnSub").show();
        });

        $('#radio-02').on("change", function () {
            $(".nxtstep").show();
            $("#profileMaker").hide();
            $("#btnSub").hide();
        });
    });
</script>
