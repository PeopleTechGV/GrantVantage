@using BE = ATS.BusinessEntity
@model BE.LicenceAndCertifications
@using BECommonConst = ATS.BusinessEntity.Common.CommonConstant


<div class="acc-header" recordid='@Model.LicenceAndCertificationsId'>
    <p class="prfle-tab-head">
        <span class='ttldb'>@String.Format("{0}", String.IsNullOrEmpty(Model.Name) ? "New Licence / Certification" : Model.Name)</span>
        <span class="notification" style="display:none;"></span>
        <span class="Save" style="display:none;"><button type="button" onclick="return outerSave(this);"></button></span>
        <span class="delete"><a href='@Url.Action("RemoveLicenceAndCertification", "Profile", new { @area = "", @precordId = Model.LicenceAndCertificationsId })' recordid='@Model.LicenceAndCertificationsId' onclick="return DeleteLicenceAndCertifications(this);"><img src="~/Content/images/delete_16.png" /></a></span>
    </p>
</div>

<div class="acc-Content">
    @using (Ajax.BeginForm("AddUpdateLicenceAndCertifications", "Profile", new { area = "" }, new AjaxOptions
    {
        InsertionMode = InsertionMode.Replace,
        HttpMethod = "POST",
        OnSuccess = "LicenceAndCertificationsSucess(data,'" + Model.LicenceAndCertificationsId + "')",
        OnFailure = "LicenceAndCertificationsFailure"
    }, new { id = "frmLicenceAndCertifications", isFormChange = "false" }))
    {
        <table>
            <tr>
                <td>
                    <div class="vacancy-Details">

                        @Html.HiddenFor(m => m.LicenceAndCertificationsId, new { @class = "ignore" })
                        @Html.HiddenFor(m => m.UserId, new { @class = "ignore" })
                        @Html.HiddenFor(m => m.ProfileId, new { @class = "ignore" })
                        @*<span class="subtitle"></span>*@
                        <div class="std-width">
                            <div class="left-div">
                                <div class="box">
                                    @Html.LanguageLabelFor(m => m.Name, new { @class = "label" })

                                    @Html.TextBoxFor(m => m.Name, new { @class = "detail-input", @onchange = "CopyName(this);", @tabindex = "13" })
                                </div>
                                <div class="box">
                                    @Html.LanguageLabelFor(m => m.ValidFrom, new { @class = "label" })

                                    @Html.TextBoxFor(m => m.ValidFromText, new { @class = "detail-input", @id = String.Format("{0}{1}", "licdatepick", Guid.NewGuid()), @tabindex = "15", @readOnly = "readOnly" })
                                </div>
                                <div class="box">
                                    @Html.LanguageLabelFor(m => m.Description, new { @class = "label" })
                                    @Html.TextAreaFor(m => m.Description, new { @class = "detail-input txtarea", @tabindex = "17" })
                                </div>
                            </div>
                            <div class="right-div">
                                <div class="box">
                                    @Html.LanguageLabelFor(m => m.IssuingAuthority, new { @class = "label" })

                                    @Html.TextBoxFor(m => m.IssuingAuthority, new { @class = "detail-input", @tabindex = "14" })
                                </div>
                                <div class="box">
                                    @Html.LanguageLabelFor(m => m.ValidTo, new { @class = "label" })

                                    @Html.TextBoxFor(m => m.ValidToText, new { @class = "detail-input", @id = String.Format("{0}{1}", "licdatepick", Guid.NewGuid()), @tabindex = "16", @readOnly = "readOnly" })
                                </div>

                            </div>


                        </div>
                    </div>
                    <br clear="all" />
                </td>
            </tr>
            <tr>
                <td class="tdSaveButton">
                    <div style="border-top: 2px solid #953634; ">
                        <button type="submit" class="prfle-button-save CaseUpper">Save License / Certification</button>
                    </div>
                </td>
            </tr>
        </table>

        <text>
            <script>
                function outerSave(element) {
                    var head = $(element).closest('.acc-header');
                    var myform = $(head).next().children().get(0);
                    var isvalidate = $(myform).valid();
                    if (isvalidate) {
                        $(myform).submit();
                    }
                    return false;
                }

                function CopyName(changeVal) {
                    var cur = $(changeVal);
                    VacancyModel.CopyDataToHeader(cur, "ttldb", cur.val())
                }

                $(function () {
                    $('*[id^="licdatepick"]').datepicker({
                        dateFormat: VacancyModel.DateFormat,
                        changeMonth: true,
                        changeYear: true,
                        showWeeks: true,
                        currentText: 'Now',
                        autoSize: true,
                        gotoCurrent: true,
                        highlightWeek: true

                    });
                    $('*[id^="licdatepick"]').datepicker("setDate", new Date());
                });

                function LicenceAndCertificationsSucess(data, custom) {
                    data = JSON.parse(data);
                    var deletelink = $("a[recordid='" + custom + "']").get(0);
                    if (data.Data !== "" && !data.IsError) {
                        var stext = $("input[value='" + custom + "']");
                        stext.val(data.Data);
                        var currentForm = $(stext.parents("form#frmLicenceAndCertifications"));
                        var attrText = currentForm.attr("data-ajax-success")
                        currentForm.attr("data-ajax-success", attrText.replace(custom, data.Data));
                        deletelink.href = deletelink.href.replace(custom, data.Data)
                        $(deletelink).attr("recordid", data.Data);
                    }
                    VacancyModel.DisplayProfileNotification(data, deletelink);
                    return false;
                }

                function DeleteLicenceAndCertifications(changeVal) {
                    var _title = $(changeVal).parents('.acc-Content').prev().children('.prfle-tab-head-brown').text();
                    var _index = _title.indexOf("(");
                    _title = _title.substring(1, _index) + '"' + $($(changeVal).parent().siblings(".ttldb").first()).text() + '"';

                    VacancyModel.ConfirmDialog("ConfirmDiv", "Are you sure you want to delete?", 300, _title, "Yes", "Cancel", "RemoveLicenceAndCertificationsDiv", changeVal, "LicenceAndCertifications");
                    return false;
                }

                function RemoveLicenceAndCertificationsDiv(Result, element, RemoveDivName) {
                    if (Result == true) {
                        $.ajax({
                            url: element.href,
                            cache: false,
                            success: function (data) {
                                data = JSON.parse(data);
                                if (data.IsError == false) {
                                    var head = $(element).closest('.acc-header');
                                    head.next().remove();
                                    head.remove();
                                    var $header = $("#accLicenceAndCertifications").parent().prev();
                                    var headcount = $("#accLicenceAndCertifications").find(".acc-header").size();
                                    $header.find('.prfle-tab-head-brown > .count').html("(" + headcount + ")")
                                    VacancyModel.ProfileHeaderCount($header);
                                }

                            },
                            error: function (xhr, ajaxOptions, thrownError) {
                                alert(xhr.status);
                                alert(thrownError);
                            }
                        });

                    }
                }

                function LicenceAndCertificationsFailure(data) {
                    data = JSON.parse(data);
                    if (data.IsError) {
                        VacancyModel.DisplayErrorMeesage('#commonMessage', data.Message, '@ATS.WebUi.Common.Constants.JSCR_MSG_FADEOUT');
                    }
                }
            </script>
        </text>
    }
</div>