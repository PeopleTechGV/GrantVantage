@using BE = ATS.BusinessEntity
@model BE.EducationHistory
@using BECommonConst = ATS.BusinessEntity.Common.CommonConstant
@{
    SelectList degreetype = (SelectList)ViewBag.DegreeTypeName;
}
<div class="acc-header" recordid='@Model.EducationId'>
    <p class="prfle-tab-head">
        <span class='ttldb'>@String.Format("{0}", String.IsNullOrEmpty(Model.InstitutionName) ? "New Education" : Model.InstitutionName)</span>
        <span class='ttllbrown'>
            <span class='ttll'>@String.Format("{0}", String.IsNullOrEmpty(Model.StartDateText) ? "" : Model.StartDateText)</span>
            <span class='dash' style="display:none;">-</span>
            <span class='ttlb'>@String.Format("{0}", String.IsNullOrEmpty(Model.EndDateText) ? "" : Model.EndDateText)</span>
        </span>
        <span class="notification" style="display:none;"></span>
        <span class="Save" style="display:none;"><button type="button" onclick="return outerSave(this);"></button></span>
        <span class="delete"><a href='@Url.Action("RemoveEducationHistory", "Profile", new { @area = "", @precordId = Model.EducationId })' recordid='@Model.EducationId' onclick="return DeleteEducation(this);"><img src="~/Content/images/delete_16.png" /></a></span>
    </p>
</div>

<div class="acc-Content">
    @using (Ajax.BeginForm("AddUpdateEducationHistory", "Profile", new { area = "" }, new AjaxOptions
    {
        InsertionMode = InsertionMode.Replace,
        HttpMethod = "POST",
        OnSuccess = "EducationHistorySucess(data,'" + Model.EducationId + "')",
        OnFailure = "EducationHistoryFailure"
    }, new { id = "frmExecutiveSummary", isFormChange = "false" }))
    {
        <text>
            <script>
                $(document).ready(function () {
                    $(this).find('.ttllbrown').each(function (index) {
                        displayeduDateRange($(this));
                    });
                });

                function outerSave(element) {
                    var head = $(element).closest('.acc-header');
                    var myform = $(head).next().children().get(0);

                    var isvalidate = $(myform).valid();
                    if (isvalidate) {
                        $(myform).submit();
                    }
                    return false;
                }

                function CopyInstitutionName(changeVal) {
                    var cur = $(changeVal);
                    VacancyModel.CopyDataToHeader(cur, "ttldb", cur.val())

                }

                function CopyDegreeType(changeVal) {
                    var cur = $(changeVal);
                    VacancyModel.CopyDataToHeader(cur, "ttllb", cur.val())
                }

                function displayeduDateRange(ttlbrownelement) {
                    if (ttlbrownelement == undefined || $(ttlbrownelement).children().length != 3)
                        return;
                    var AllowBrace = false;
                    var AllowDash = false;
                    var Startingallow = false;

                    $(ttlbrownelement).find(".dash").hide();
                    if ($.trim($(ttlbrownelement).find(".ttll").html()) != '') { AllowBrace = true; Startingallow = true; };
                    if ($.trim($(ttlbrownelement).find(".ttlb").html()) != '') { AllowBrace = true; AllowDash = true; };
                    if (AllowDash && Startingallow) {
                        $(ttlbrownelement).find(".dash").show();
                    }

                    var starting_index = $(ttlbrownelement).html().indexOf('(');
                    var ending_index = $(ttlbrownelement).html().indexOf(')');
                    var oldhtml = $(ttlbrownelement).html();
                    if ((starting_index + ending_index) > 1) {
                        oldhtml = $(ttlbrownelement).html().substring(starting_index + 1, ending_index);
                        if ($.trim($(oldhtml).text()) == '') {
                            AllowBrace = false;
                        }
                    }

                    if (AllowBrace) {
                        $(ttlbrownelement).html('');
                        $(ttlbrownelement).html("(" + oldhtml + ")");
                    }
                    else {
                        $(ttlbrownelement).html('');
                        $(ttlbrownelement).html(oldhtml);
                    }
                }

                function filleduBracket(element) {
                    var changedata = $(element.closest(".acc-Content"));
                    changedata.siblings().each(function (index) {
                        if ($(this).attr("aria-selected") == 'true') {
                            displayeduDateRange($(this).find('.ttllbrown'));
                        }
                    });
                }

                function CopyStartDate(changeVal) {
                    var cur = $(changeVal);
                    VacancyModel.CopyDataToHeader(cur, "ttll", cur.val())
                    filleduBracket(cur);
                }

                function CopyEndDate(changeVal) {
                    var cur = $(changeVal);
                    VacancyModel.CopyDataToHeader(cur, "ttlb", cur.val())
                    filleduBracket(cur);
                }

                function EducationHistorySucess(data, custom) {
                    data = JSON.parse(data);
                    var deletelink = $("a[recordid='" + custom + "']").get(0);
                    if (data.Data !== "" && !data.IsError) {
                        var stext = $("input[value='" + custom + "']");
                        stext.val(data.Data);

                        var currentForm = $(stext.parents("form#frmExecutiveSummary"));
                        var attrText = currentForm.attr("data-ajax-success")
                        currentForm.attr("data-ajax-success", attrText.replace(custom, data.Data));

                        deletelink.href = deletelink.href.replace(custom, data.Data)
                        $(deletelink).attr("recordid", data.Data);
                    }
                    VacancyModel.DisplayProfileNotification(data, deletelink);
                    return false;
                }

                function DeleteEducation(changeVal) {
                    var _title = $(changeVal).parents('.acc-Content').prev().children('.prfle-tab-head-brown').text();
                    var _index = _title.indexOf("(");
                    _title = _title.substring(1, _index) + '"' + $($(changeVal).parent().siblings(".ttldb").first()).text() + '"';

                    VacancyModel.ConfirmDialog("ConfirmDiv", "Are you sure you want to delete?", 300, _title, "Yes", "Cancel", "RemoveEducationHistoryDiv", changeVal, "Education History");
                    return false;
                }

                function RemoveEducationHistoryDiv(Result, element, RemoveDivName) {
                    if (Result == true) {
                        $.ajax({
                            url: element.href,
                            cache: false,
                            success: function (data) {
                                data = JSON.parse(data);
                                if (data.IsError == false) {
                                    var head = $(element).closest('.acc-header');
                                    head.next().remove();
                                    head.remove();
                                    var $header = $("#accEducations").parent().prev();
                                    var headcount = $("#accEducations").find(".acc-header").size();
                                    $header.find('.prfle-tab-head-brown > .count').html("(" + headcount + ")")
                                    VacancyModel.ProfileHeaderCount($header);
                                }
                            },
                            error: function (xhr, ajaxOptions, thrownError) {
                                alert(xhr.status);
                                alert(thrownError);
                            }
                        });
                    }
                }

                function EducationHistoryFailure(data) {
                    data = JSON.parse(data);
                    if (data.IsError) {
                        VacancyModel.DisplayErrorMeesage('#commonMessage', data.Message, '@ATS.WebUi.Common.Constants.JSCR_MSG_FADEOUT');
                    }
                }

                $(function () {
                    $('*[id^="edudatepick"]').datepicker({
                        dateFormat: VacancyModel.DateFormat,
                        changeMonth: true,
                        changeYear: true,
                        showWeeks: true,
                        currentText: 'Now',
                        autoSize: true,
                        gotoCurrent: true,
                        highlightWeek: true

                    });
                    $('*[id^="edudatepick"]').datepicker("setDate", new Date());
                });
            </script>
        </text>
        <table>
            <tr>
                <td>
                    <div class="vacancy-Details">
                        <div class="left-div">
                            @Html.HiddenFor(m => m.EducationId, new { @class = "ignore" })

                            @Html.HiddenFor(m => m.ProfileId, new { @class = "ignore" })
                            @Html.HiddenFor(m => m.UserId, new { @class = "ignore" })
                            <div class="box">
                                @Html.LanguageLabelFor(m => m.InstitutionName, new { @class = "label" })

                                @Html.TextBoxFor(m => m.InstitutionName, new { @class = "detail-input FullTextboxProfile", @onchange = "CopyInstitutionName(this);", @tabindex = "1" })
                            </div>
                            <div class="box">
                                @Html.LanguageLabelFor(m => m.StartDateText, new { @class = "label" })

                                @Html.TextBoxFor(m => m.StartDateText, new { @class = "detail-input", @id = String.Format("{0}{1}", "edudatepick", Guid.NewGuid()), @onchange = "CopyStartDate(this);", @tabindex = "2", @readOnly = "readOnly" })
                            </div>
                            <div class="box">
                                @Html.LanguageLabelFor(m => m.DegreeType, new { @class = "label" })
                                @Html.DropDownListFor(m => m.DegreeType, (SelectList)ViewBag.DegreeTypeName, "---Please Select---", new { @class = "detail-select", @tabindex = "4" })
                            </div>
                            <div class="box">
                                @Html.LanguageLabelFor(m => m.City, new { @class = "label" })
                                @Html.TextBoxFor(m => m.City, new { @class = "detail-input", @tabindex = "6" })
                            </div>
                            <div class="box">
                                @Html.LanguageLabelFor(m => m.State, new { @class = "label" })
                                @Html.TextBoxFor(m => m.State, new { @class = "detail-input", @tabindex = "8" })
                            </div>  
                            <div class="box">
                                @Html.LanguageLabelFor(m => m.Country, new { @class = "label" })
                                @Html.TextBoxFor(m => m.Country, new { @class = "detail-input", @tabindex = "9" })
                            </div>

                            <div class="box">
                                @Html.LanguageLabelFor(m => m.Description, new { @class = "label" })
                                @Html.TextAreaFor(m => m.Description, new { @class = "detail-input txtarea FullTextAreaProfile", @tabindex = "12" })
                            </div>
                        </div>
                        <div class="right-div right-div-margin">
                            <div class="box">
                                @Html.LanguageLabelFor(m => m.EndDateText, new { @class = "label" })
                                @Html.TextBoxFor(m => m.EndDateText, new { @class = "detail-input", @id = String.Format("{0}{1}", "edudatepick", Guid.NewGuid()), @onchange = "CopyEndDate(this);", @tabindex = "3", @readOnly = "readOnly" })
                            </div>
                            <div class="box">
                                @Html.LanguageLabelFor(m => m.MajorSubject, new { @class = "label" })
                                @Html.TextBoxFor(m => m.MajorSubject, new { @class = "detail-input", @tabindex = "5" })
                            </div>
                            <div class="box">
                                @Html.LanguageLabelFor(m => m.DegreeDate, new { @class = "label" })

                                @Html.TextBoxFor(m => m.DegreeDateText, new { @class = "detail-input", @id = String.Format("{0}{1}", "edudatepick", Guid.NewGuid()), @tabindex = "10", @readOnly = "readOnly" })
                            </div>

                            <div class="box">
                                @Html.LanguageLabelFor(m => m.MeasureSystem, new { @class = "label" })

                                @Html.TextBoxFor(m => m.MeasureSystem, new { @class = "detail-input", @tabindex = "11" })
                            </div>
                        </div>
                    </div>
                    <br clear="all" />
                </td>
            </tr>
            <tr>
                <td class="tdSaveButton">
                    <div style="border-top: 2px solid #953634;">
                        <button type="submit" class="prfle-button-save CaseUpper">Save Education</button>
                    </div>
                </td>
            </tr>
        </table>
    }
</div>